BOARD_SIZE = 8

class BailOut(__builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'RXhjZXB0aW9u').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))]):
    pass

def qobstbqndveVKEJryYRWvtvAyRXYCqevkFAuMwLuQvFdODKNtqEGGjMadYmJlAbBKjeTgvzRHfhUoYnCPDXEeakYnjWNqXiTnKj(queens):
    left = right = col = queens[-1]
    for r in __builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'cmV2ZXJzZWQ=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))](queens[:-1]):
        (left, right) = (left - 1, right + 1)
        if r in (left, col, right):
            raise BailOut

def yntjUqtBrgevwYyVxZHHloBaUZpkyAsruOvrmeWmLkPxGUspwFutfAewtiGjlRHAfTvsQBYljHFpNZsEIpbIcQrjErPwneOrnqp(queens):
    for i in __builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'cmFuZ2U=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))](BOARD_SIZE):
        test_queens = queens + [i]
        try:
            qobstbqndveVKEJryYRWvtvAyRXYCqevkFAuMwLuQvFdODKNtqEGGjMadYmJlAbBKjeTgvzRHfhUoYnCPDXEeakYnjWNqXiTnKj(test_queens)
            if __builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'bGVu').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))](test_queens) == BOARD_SIZE:
                return test_queens
            else:
                return yntjUqtBrgevwYyVxZHHloBaUZpkyAsruOvrmeWmLkPxGUspwFutfAewtiGjlRHAfTvsQBYljHFpNZsEIpbIcQrjErPwneOrnqp(test_queens)
        except BailOut:
            pass
    raise BailOut
queens = yntjUqtBrgevwYyVxZHHloBaUZpkyAsruOvrmeWmLkPxGUspwFutfAewtiGjlRHAfTvsQBYljHFpNZsEIpbIcQrjErPwneOrnqp([])
__builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'cHJpbnQ=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))](queens)
__builtins__.__dict__[__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'cHJpbnQ=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))))))))](__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'Cg==').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8'))))))))))).join((__builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'LiA=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8'))))))))))) * q + __builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'USA=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8'))))))))))) + __builtins__.__dict__[bytes([(lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 105 else x + 1)(105), (lambda x: x if x == 109 else x + 1)(109), (lambda x: x if x == 112 else x + 1)(112), (lambda x: x if x == 111 else x + 1)(111), (lambda x: x if x == 114 else x + 1)(114), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 95 else x + 1)(95), (lambda x: x if x == 95 else x + 1)(95)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))](bytes([(lambda x: x if x == 98 else x + 1)(98), (lambda x: x if x == 97 else x + 1)(97), (lambda x: x if x == 115 else x + 1)(115), (lambda x: x if x == 101 else x + 1)(101), (lambda x: x if x == 54 else x + 1)(54), (lambda x: x if x == 52 else x + 1)(52)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8')))))).b64decode(b'LiA=').decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode(bytes([(lambda x: x if x == 117 else x + 1)(117), (lambda x: x if x == 116 else x + 1)(116), (lambda x: x if x == 102 else x + 1)(102), (lambda x: x if x == 45 else x + 1)(45), (lambda x: x if x == 56 else x + 1)(56)]).decode('utf-8'))))))))))) * (BOARD_SIZE - q - 1) for q in queens)))